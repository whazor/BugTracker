//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/BugTracker.Screens;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private ItemCollection _Collection = new ItemCollection();

		public ItemCollection Collection
		{
			get
			{
				return this._Collection;
			}
		}
	}

	public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
	{ 
	}

	public class Item : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Omschrijving = string.Empty;

		public string Omschrijving
		{
			get
			{
				return this._Omschrijving;
			}

			set
			{
				if (this._Omschrijving != value)
				{
					this._Omschrijving = value;
					this.OnPropertyChanged("Omschrijving");
				}
			}
		}

		private double _ID = 0;

		public double ID
		{
			get
			{
				return this._ID;
			}

			set
			{
				if (this._ID != value)
				{
					this._ID = value;
					this.OnPropertyChanged("ID");
				}
			}
		}

		private double _Prioriteit = 0;

		public string Prioriteit
		{
			get
			{
                if (_Prioriteit <= 3)
                {
                    return "Hoog";
                } 
                return _Prioriteit <= 7 ? "Normaal" : "Laag";
			}

			set
			{
			    _Prioriteit = Double.Parse(value);
				OnPropertyChanged("Prioriteit");
			}
		}

		private double _Status = 0;

	    public string Status
	    {
	        get
	        {

	            // won't fix
	            // open
	            // closed
	            // fixed
	            // assigned
	            if (_Status <= 2)
	            {
	                return "won't fix";
	            }
	            if (_Status <= 4)
	            {
	                return "open";
	            }
	            if (_Status <= 6)
	            {
	                return "closed";
	            }

	            return _Status <= 8 ? "fixed" : "assigned";
	        }

	        set
	        {
	            _Status = Double.Parse(value);
	            OnPropertyChanged("Status");
	        }
	    }
	}
#endif
}
